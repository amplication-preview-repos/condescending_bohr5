/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IntegrationServiceService } from "../integrationService.service";
import { IntegrationServiceCreateInput } from "./IntegrationServiceCreateInput";
import { IntegrationService } from "./IntegrationService";
import { IntegrationServiceFindManyArgs } from "./IntegrationServiceFindManyArgs";
import { IntegrationServiceWhereUniqueInput } from "./IntegrationServiceWhereUniqueInput";
import { IntegrationServiceUpdateInput } from "./IntegrationServiceUpdateInput";

export class IntegrationServiceControllerBase {
  constructor(protected readonly service: IntegrationServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IntegrationService })
  async createIntegrationService(
    @common.Body() data: IntegrationServiceCreateInput
  ): Promise<IntegrationService> {
    return await this.service.createIntegrationService({
      data: data,
      select: {
        apiDetails: true,
        createdAt: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IntegrationService] })
  @ApiNestedQuery(IntegrationServiceFindManyArgs)
  async integrationServices(
    @common.Req() request: Request
  ): Promise<IntegrationService[]> {
    const args = plainToClass(IntegrationServiceFindManyArgs, request.query);
    return this.service.integrationServices({
      ...args,
      select: {
        apiDetails: true,
        createdAt: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IntegrationService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async integrationService(
    @common.Param() params: IntegrationServiceWhereUniqueInput
  ): Promise<IntegrationService | null> {
    const result = await this.service.integrationService({
      where: params,
      select: {
        apiDetails: true,
        createdAt: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IntegrationService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIntegrationService(
    @common.Param() params: IntegrationServiceWhereUniqueInput,
    @common.Body() data: IntegrationServiceUpdateInput
  ): Promise<IntegrationService | null> {
    try {
      return await this.service.updateIntegrationService({
        where: params,
        data: data,
        select: {
          apiDetails: true,
          createdAt: true,
          id: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IntegrationService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIntegrationService(
    @common.Param() params: IntegrationServiceWhereUniqueInput
  ): Promise<IntegrationService | null> {
    try {
      return await this.service.deleteIntegrationService({
        where: params,
        select: {
          apiDetails: true,
          createdAt: true,
          id: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
