/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Node as PrismaNode,
  Edge as PrismaEdge,
  Flow as PrismaFlow,
} from "@prisma/client";

export class NodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NodeCountArgs, "select">): Promise<number> {
    return this.prisma.node.count(args);
  }

  async nodes<T extends Prisma.NodeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NodeFindManyArgs>
  ): Promise<PrismaNode[]> {
    return this.prisma.node.findMany<Prisma.NodeFindManyArgs>(args);
  }
  async node<T extends Prisma.NodeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NodeFindUniqueArgs>
  ): Promise<PrismaNode | null> {
    return this.prisma.node.findUnique(args);
  }
  async createNode<T extends Prisma.NodeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NodeCreateArgs>
  ): Promise<PrismaNode> {
    return this.prisma.node.create<T>(args);
  }
  async updateNode<T extends Prisma.NodeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NodeUpdateArgs>
  ): Promise<PrismaNode> {
    return this.prisma.node.update<T>(args);
  }
  async deleteNode<T extends Prisma.NodeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NodeDeleteArgs>
  ): Promise<PrismaNode> {
    return this.prisma.node.delete(args);
  }

  async getEdge(parentId: string): Promise<PrismaEdge | null> {
    return this.prisma.node
      .findUnique({
        where: { id: parentId },
      })
      .edge();
  }

  async getFlow(parentId: string): Promise<PrismaFlow | null> {
    return this.prisma.node
      .findUnique({
        where: { id: parentId },
      })
      .flow();
  }
}
