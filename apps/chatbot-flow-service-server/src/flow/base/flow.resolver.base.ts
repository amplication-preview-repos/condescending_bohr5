/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Flow } from "./Flow";
import { FlowCountArgs } from "./FlowCountArgs";
import { FlowFindManyArgs } from "./FlowFindManyArgs";
import { FlowFindUniqueArgs } from "./FlowFindUniqueArgs";
import { CreateFlowArgs } from "./CreateFlowArgs";
import { UpdateFlowArgs } from "./UpdateFlowArgs";
import { DeleteFlowArgs } from "./DeleteFlowArgs";
import { NodeFindManyArgs } from "../../node/base/NodeFindManyArgs";
import { Node } from "../../node/base/Node";
import { Bot } from "../../bot/base/Bot";
import { FlowService } from "../flow.service";
@graphql.Resolver(() => Flow)
export class FlowResolverBase {
  constructor(protected readonly service: FlowService) {}

  async _flowsMeta(
    @graphql.Args() args: FlowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Flow])
  async flows(@graphql.Args() args: FlowFindManyArgs): Promise<Flow[]> {
    return this.service.flows(args);
  }

  @graphql.Query(() => Flow, { nullable: true })
  async flow(@graphql.Args() args: FlowFindUniqueArgs): Promise<Flow | null> {
    const result = await this.service.flow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Flow)
  async createFlow(@graphql.Args() args: CreateFlowArgs): Promise<Flow> {
    return await this.service.createFlow({
      ...args,
      data: {
        ...args.data,

        bot: args.data.bot
          ? {
              connect: args.data.bot,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Flow)
  async updateFlow(@graphql.Args() args: UpdateFlowArgs): Promise<Flow | null> {
    try {
      return await this.service.updateFlow({
        ...args,
        data: {
          ...args.data,

          bot: args.data.bot
            ? {
                connect: args.data.bot,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Flow)
  async deleteFlow(@graphql.Args() args: DeleteFlowArgs): Promise<Flow | null> {
    try {
      return await this.service.deleteFlow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Node], { name: "nodes" })
  async findNodes(
    @graphql.Parent() parent: Flow,
    @graphql.Args() args: NodeFindManyArgs
  ): Promise<Node[]> {
    const results = await this.service.findNodes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Bot, {
    nullable: true,
    name: "bot",
  })
  async getBot(@graphql.Parent() parent: Flow): Promise<Bot | null> {
    const result = await this.service.getBot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
