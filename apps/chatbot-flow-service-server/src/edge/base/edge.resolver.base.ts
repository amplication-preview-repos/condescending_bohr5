/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Edge } from "./Edge";
import { EdgeCountArgs } from "./EdgeCountArgs";
import { EdgeFindManyArgs } from "./EdgeFindManyArgs";
import { EdgeFindUniqueArgs } from "./EdgeFindUniqueArgs";
import { CreateEdgeArgs } from "./CreateEdgeArgs";
import { UpdateEdgeArgs } from "./UpdateEdgeArgs";
import { DeleteEdgeArgs } from "./DeleteEdgeArgs";
import { NodeFindManyArgs } from "../../node/base/NodeFindManyArgs";
import { Node } from "../../node/base/Node";
import { EdgeService } from "../edge.service";
@graphql.Resolver(() => Edge)
export class EdgeResolverBase {
  constructor(protected readonly service: EdgeService) {}

  async _edgesMeta(
    @graphql.Args() args: EdgeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Edge])
  async edges(@graphql.Args() args: EdgeFindManyArgs): Promise<Edge[]> {
    return this.service.edges(args);
  }

  @graphql.Query(() => Edge, { nullable: true })
  async edge(@graphql.Args() args: EdgeFindUniqueArgs): Promise<Edge | null> {
    const result = await this.service.edge(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Edge)
  async createEdge(@graphql.Args() args: CreateEdgeArgs): Promise<Edge> {
    return await this.service.createEdge({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Edge)
  async updateEdge(@graphql.Args() args: UpdateEdgeArgs): Promise<Edge | null> {
    try {
      return await this.service.updateEdge({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Edge)
  async deleteEdge(@graphql.Args() args: DeleteEdgeArgs): Promise<Edge | null> {
    try {
      return await this.service.deleteEdge(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Node], { name: "nodes" })
  async findNodes(
    @graphql.Parent() parent: Edge,
    @graphql.Args() args: NodeFindManyArgs
  ): Promise<Node[]> {
    const results = await this.service.findNodes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
