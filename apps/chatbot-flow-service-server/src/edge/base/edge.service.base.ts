/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Edge as PrismaEdge, Node as PrismaNode } from "@prisma/client";

export class EdgeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EdgeCountArgs, "select">): Promise<number> {
    return this.prisma.edge.count(args);
  }

  async edges<T extends Prisma.EdgeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EdgeFindManyArgs>
  ): Promise<PrismaEdge[]> {
    return this.prisma.edge.findMany<Prisma.EdgeFindManyArgs>(args);
  }
  async edge<T extends Prisma.EdgeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EdgeFindUniqueArgs>
  ): Promise<PrismaEdge | null> {
    return this.prisma.edge.findUnique(args);
  }
  async createEdge<T extends Prisma.EdgeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EdgeCreateArgs>
  ): Promise<PrismaEdge> {
    return this.prisma.edge.create<T>(args);
  }
  async updateEdge<T extends Prisma.EdgeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EdgeUpdateArgs>
  ): Promise<PrismaEdge> {
    return this.prisma.edge.update<T>(args);
  }
  async deleteEdge<T extends Prisma.EdgeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EdgeDeleteArgs>
  ): Promise<PrismaEdge> {
    return this.prisma.edge.delete(args);
  }

  async findNodes(
    parentId: string,
    args: Prisma.NodeFindManyArgs
  ): Promise<PrismaNode[]> {
    return this.prisma.edge
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .nodes(args);
  }
}
