/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EdgeService } from "../edge.service";
import { EdgeCreateInput } from "./EdgeCreateInput";
import { Edge } from "./Edge";
import { EdgeFindManyArgs } from "./EdgeFindManyArgs";
import { EdgeWhereUniqueInput } from "./EdgeWhereUniqueInput";
import { EdgeUpdateInput } from "./EdgeUpdateInput";
import { NodeFindManyArgs } from "../../node/base/NodeFindManyArgs";
import { Node } from "../../node/base/Node";
import { NodeWhereUniqueInput } from "../../node/base/NodeWhereUniqueInput";

export class EdgeControllerBase {
  constructor(protected readonly service: EdgeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Edge })
  async createEdge(@common.Body() data: EdgeCreateInput): Promise<Edge> {
    return await this.service.createEdge({
      data: data,
      select: {
        createdAt: true,
        fromNode: true,
        id: true,
        toNode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Edge] })
  @ApiNestedQuery(EdgeFindManyArgs)
  async edges(@common.Req() request: Request): Promise<Edge[]> {
    const args = plainToClass(EdgeFindManyArgs, request.query);
    return this.service.edges({
      ...args,
      select: {
        createdAt: true,
        fromNode: true,
        id: true,
        toNode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Edge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async edge(
    @common.Param() params: EdgeWhereUniqueInput
  ): Promise<Edge | null> {
    const result = await this.service.edge({
      where: params,
      select: {
        createdAt: true,
        fromNode: true,
        id: true,
        toNode: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Edge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEdge(
    @common.Param() params: EdgeWhereUniqueInput,
    @common.Body() data: EdgeUpdateInput
  ): Promise<Edge | null> {
    try {
      return await this.service.updateEdge({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fromNode: true,
          id: true,
          toNode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Edge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEdge(
    @common.Param() params: EdgeWhereUniqueInput
  ): Promise<Edge | null> {
    try {
      return await this.service.deleteEdge({
        where: params,
        select: {
          createdAt: true,
          fromNode: true,
          id: true,
          toNode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/nodes")
  @ApiNestedQuery(NodeFindManyArgs)
  async findNodes(
    @common.Req() request: Request,
    @common.Param() params: EdgeWhereUniqueInput
  ): Promise<Node[]> {
    const query = plainToClass(NodeFindManyArgs, request.query);
    const results = await this.service.findNodes(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,

        edge: {
          select: {
            id: true,
          },
        },

        flow: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/nodes")
  async connectNodes(
    @common.Param() params: EdgeWhereUniqueInput,
    @common.Body() body: NodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nodes: {
        connect: body,
      },
    };
    await this.service.updateEdge({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/nodes")
  async updateNodes(
    @common.Param() params: EdgeWhereUniqueInput,
    @common.Body() body: NodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nodes: {
        set: body,
      },
    };
    await this.service.updateEdge({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/nodes")
  async disconnectNodes(
    @common.Param() params: EdgeWhereUniqueInput,
    @common.Body() body: NodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nodes: {
        disconnect: body,
      },
    };
    await this.service.updateEdge({
      where: params,
      data,
      select: { id: true },
    });
  }
}
