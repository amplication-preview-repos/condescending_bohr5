/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Bot as PrismaBot, Flow as PrismaFlow } from "@prisma/client";

export class BotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BotCountArgs, "select">): Promise<number> {
    return this.prisma.bot.count(args);
  }

  async bots<T extends Prisma.BotFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotFindManyArgs>
  ): Promise<PrismaBot[]> {
    return this.prisma.bot.findMany<Prisma.BotFindManyArgs>(args);
  }
  async bot<T extends Prisma.BotFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotFindUniqueArgs>
  ): Promise<PrismaBot | null> {
    return this.prisma.bot.findUnique(args);
  }
  async createBot<T extends Prisma.BotCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotCreateArgs>
  ): Promise<PrismaBot> {
    return this.prisma.bot.create<T>(args);
  }
  async updateBot<T extends Prisma.BotUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotUpdateArgs>
  ): Promise<PrismaBot> {
    return this.prisma.bot.update<T>(args);
  }
  async deleteBot<T extends Prisma.BotDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BotDeleteArgs>
  ): Promise<PrismaBot> {
    return this.prisma.bot.delete(args);
  }

  async findFlows(
    parentId: string,
    args: Prisma.FlowFindManyArgs
  ): Promise<PrismaFlow[]> {
    return this.prisma.bot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .flows(args);
  }
}
